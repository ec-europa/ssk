<?xml version="1.0" encoding="UTF-8" ?>

<project name="project" description="Targets shared by differenct project types." default="">

    <target name="build-platform" description="Build NextEuropa Platform code without version control.">
        <phingcall target="project-platform-backup" />
        <phingcall target="project-platform-delete" />

        <if>
            <contains string="${profile}" substring="multisite" />
            <then>
                <phingcall target="project-platform-set-version" />
                <phingcall target="project-platform-package-unpack" />
                <phingcall target="project-modules-devops-dl" />
            </then>
            <else>
                <phingcall target="project-profile-build" />
            </else>
        </if>

       <phingcall target="project-platform-set-htaccess" />
       <phingcall target="project-platform-restore" />

    </target>

    <target name="project-profile-build" hidden="true" description="Build Drupal profile.">
        <drush command="dl" assume="yes">
            <param>"${profile}-${profile.core}"</param>
            <option name="destination">${project.basedir}</option>
            <option name="strict">0</option>
            <option name="drupal-project-rename">${build.dev}</option>
        </drush>
    </target>

    <target name="build-subsite" hidden="true" description="Build NextEuropa Subsite code without version control."
        depends="
            project-subsite-backup,
            project-subsite-restore">
        <echo msg="TODO: subsite builds not yet developed." />
    </target>

    <target name="build-theme" hidden="true" description="Build EC Europa theme without version control."
        depends="
            theme-europa-download-extract,
            theme-europa-create-symlinks" />

    <target name="install-clean" description="Install NextEuropa site from scratch.">
        <exec command="chmod 775 ${build.platform.dir.settings}" />

        <phingcall target="drush-aliases-generate" />
        <phingcall target="drush-sql-create" />

        <if>
            <contains string="${profile}" substring="multisite" />
            <then>
                <if>
                    <and>
                        <equals arg1="${platform.package.db.cache}" arg2="1" />
                        <available file="${share.path.platform}/databases/platform-dev-${platform.package.version.current}/platform-dev-${platform.package.version.current}.sql" type="file" />
                    </and>
                    <then>
                        <phingcall target="drush-settings-generate" />
                        <exec command="${toolkit.dir.bin.drush} --root=${build.platform.dir} status bootstrap | grep -q Successful" returnProperty="drush-status-bootstrap" />
                        <if>
                            <not>
                                <equals arg1="${drush-status-bootstrap}" arg2="0" />
                            </not>
                            <then>
                                <phingcall target="drush-sql-import">
                                    <property name="database-file" value="${share.path.platform}/databases/platform-dev-${platform.package.version.current}/platform-dev-${platform.package.version.current}.sql" />
                                </phingcall>
                            </then>
                        </if>
                    </then>
                    <else>
                        <phingcall target="drush-site-install" />
                        <if>
                            <equals arg1="${platform.package.db.cache}" arg2="1" />
                            <then>
                                <phingcall target="drush-sql-dump">
                                    <property name="database-file" value="${share.path.platform}/databases/platform-dev-${platform.package.version.current}/platform-dev-${platform.package.version.current}.sql" />
                                </phingcall>
                            </then>
                        </if>
                    </else>
                </if>
            </then>
            <else>
                <phingcall target="drush-site-install" />
            </else>
        </if>

        <phingcall target="project-modules-install-en" />
        <phingcall target="project-modules-devel-en" />
        <phingcall target="reset-filesystem-permissions" />
        <phingcall target="drush-node-access-rebuild" />
    </target>

    <target name="install-clone" description="Install NextEuropa site with sanitized production data."
        depends="
            drush-aliases-generate,
            drush-settings-generate,
            project-database-import,
            project-modules-devel-en,
            reset-filesystem-permissions,
            drush-cache-reset" />

    <target name="project-composer-install" description="Runs composer install."
        hidden="true">
        <if>
            <isset property="composer-no-dev" />
            <then>
                <composer command="install" composer="${project.bin.composer}">
                    <arg value="--working-dir=${composer-working-dir}" />
                    <arg value="--no-interaction" />
                    <arg value="--no-suggest" />
                    <arg value="--no-dev" />
                    <arg value="--ansi" />
                </composer>
            </then>
            <else>
                <composer command="install" composer="${project.bin.composer}">
                    <arg value="--working-dir=${composer-working-dir}" />
                    <arg value="--no-interaction" />
                    <arg value="--no-suggest" />
                    <arg value="--ansi" />
                </composer>
            </else>
        </if>
    </target>

    <target name="project-database-download" hidden="true" description="Download sanitized production database from archive.">
        <if>
            <available file="${db-dl-file}" type="file" />
            <then>
                <echo msg="File ${db-dl-file} already downloaded." />
                <echo msg="Proceeding to import." />
            </then>
            <else>
                <if>
                    <isfalse value="${db.dl.filename}" />
                    <then>
                        <exec command='curl -s https://${db.dl.username}:${db.dl.password}@${db.dl.url}|egrep "li.*sql.gz"|head -1|cut -d\" -f2' outputProperty="db.dl.filename" checkreturn="true" />
                    </then>
                </if>
                <echo msg="Download the production database ${db.dl.filename}." />
                <phingcall target="package-download">
                    <property name="package-name" value="${db.dl.filename}" />
                    <property name="package-cache-location" value="${share.path.subsites.packages.database}/${project.id}" />
                    <property name="package-download-location" value="https://${db.dl.username}:${db.dl.password}@${db.dl.url}" />
                </phingcall>
                <exec command="gunzip ${share.path.subsites.packages.database}/${project.id}/${db.dl.filename}" checkreturn="true" passthru="false" logoutput="true" />
                <exec command='find ${share.path.subsites.packages.database}/${project.id} -maxdepth 1 -name "*.sql" -type f | head -1' outputproperty="db-dl-file" />
            </else>
        </if>
    </target>

    <target name="project-database-file" hidden="true" description="Check if database file is available.">
        <if>
            <available file="${project.db.file}" type="file" />
            <then>
                <property name="db-dl-file" value="${project.db.file}" />
            </then>
            <else>
                <exec command='find ${share.path.subsites.packages.database}/${project.id} -maxdepth 1 -name "*.sql" -type f | head -1' outputproperty="db-dl-file" />
            </else>
        </if>
    </target>

    <target name="project-database-import" hidden="true" description="Import database for project with drush."
        depends="
            project-database-file,
            project-database-download">
        <echo msg="Import production database." />
        <phingcall target="drush-sql-drop" />
        <phingcall target="drush-sql-create" />
        <phingcall target="drush-sql-import">
            <property name="database-file" value="${db-dl-file}" />
        </phingcall>
    </target>

    <target name="project-platform-delete" hidden="true" description="Remove previous platform build..">
        <phingcall target="project-scratch-build">
            <property name="dir-build" value="${build.platform.dir}" override="true" />
        </phingcall>
    </target>

    <target name="project-platform-package-unpack" hidden="true" description="Download and unpack platform deploy package.">
        <property file="${project.tmp.dir}/build.version.props" logoutput="${logoutput}" override="true" />
        <mkdir dir="${share.path.platform.packages.deploy}" />
        <phingcall target="package-download-unpack">
            <property name="package-name" value="platform-dev-${platform.package.version.current}.tar.gz" />
            <property name="package-cache-location" value="${share.path.platform.packages.deploy}" />
            <property name="package-download-location" value="https://platform-ci.ne-dev.eu/releases" />
            <property name="package-extract-location" value="${build.platform.dir}" />
        </phingcall>
    </target>

    <target name="project-platform-set-htaccess" hidden="true" description="Append htaccess config to root .htaccess.">
        <if>
            <istrue value="${build.platform.htaccess.append.text}" />
            <then>
                <if>
                    <available file="${build.platform.htaccess.append.text}" />
                    <then>
                        <append file="${build.platform.htaccess.append.text}" destFile="${build.platform.dir}/.htaccess" />
                    </then>
                    <else>
                        <append text="${build.platform.htaccess.append.text}" destFile="${build.platform.dir}/.htaccess" />
                    </else>
                </if>
            </then>
            <else>
                <echo msg="Appended no text to htaccess." />
            </else>
        </if>
    </target>

    <target name="project-platform-set-version" description="Save the platform version used for builds."
        hidden="true">
        <if>
            <matches string="${platform.package.version}" pattern="^[1-9]+\." />
            <then>
                <propertyregex property="platform.package.version.major" subject="${platform.package.version}" pattern="^([0-9]+)\." match="$1" override="true" />
                <propertyregex property="platform.package.version.minor" subject="${platform.package.version}" pattern="^[0-9]+\.([0-9]+)" match="$1" override="true" />
                <propertyregex property="platform.package.version.reference" subject="${platform.package.version}" pattern="^[0-9]+\.[0-9]+\.([0-9]+)" match="$1" override="true" />
                <if>
                    <matches string="${platform.package.version.minor}" pattern="[0-9]+" />
                    <then>
                        <php expression="${platform.package.version.minor} + 1" returnProperty="platform.upgrade" level="debug" />
                        <exec command="echo $(curl -s 'https://platform-ci.ne-dev.eu/releases/' | egrep -o 'platform-dev-${platform.package.version.major}\.${platform.package.version.minor}\.[0-9]+' | sed -e 's/^platform-dev-//' | sort -t. -rn -k1,1 -k2,2 -k3,3 | head -1)" outputproperty="platform.package.version.current" />
                        <exec command="echo $(curl -s 'https://platform-ci.ne-dev.eu/releases/' | egrep -o 'platform-dev-${platform.package.version.major}\.${platform.upgrade}\.[0-9]+' | sed -e 's/^platform-dev-//' | sort -t. -rn -k1,1 -k2,2 -k3,3 | head -1)" outputproperty="platform.package.version.next" />
                        <exec command="echo $(curl -s 'https://platform-ci.ne-dev.eu/releases/' | egrep -o 'platform-dev-${platform.package.version.major}\.[0-9]+\.[0-9]+' | sed -e 's/^platform-dev-//' | sort -t. -rn -k1,1 -k2,2 -k3,3 | head -1)" outputproperty="platform.package.version.latest" />
                    </then>
                </if>
                <if>
                    <matches string="${platform.package.version}" pattern="^[1-9]+\.[1-9]+\.[1-9]+$" />
                    <then>
                        <property name="platform.package.version.current" value="${platform.package.version}" override="true" />
                    </then>
                </if>
            </then>
        </if>
        <echo msg="The platform package version is set to ${platform.package.version}." />
        <echo msg="The build will be performed with version ${platform.package.version.current}." />
        <propertyregex property="platform.package.version.reference" subject="${platform.package.version.current}" pattern="^[0-9]+\.[0-9]+\.([0-9]+)" match="$1" override="true" />
        <if>
            <and>
                <matches string="${platform.package.version.next}" pattern="^[1-9]+\.[1-9]+\.[1-9]+$" />
                <versioncompare version="${platform.package.version.next}" desiredVersion="${platform.package.version}" operator="gt" />
            </and>
            <then>
                <php expression="${platform.package.version.minor} + 1" returnProperty="platform.upgrade" level="debug" />
                <echo msg="Last released deploy package is at ${platform.package.version.latest}." level="warning" />
                <echo msg="Please upgrade your platform version to ${platform.package.version.major}.${platform.upgrade}." level="warning" />
            </then>
        </if>
        <echoproperties regex="~^platform\.package\.version~" destfile="${project.tmp.dir}/build.version.props" />
    </target>

    <target name="project-scratch-build" hidden="true" description="Delete previous build to start over clean.">
        <echo msg="Delete previous build." />
        <if>
            <available file="${build.platform.dir.settings}/default.settings.php" />
            <then>
                <move file="${build.platform.dir.settings}/default.settings.php" tofile="${project.tmp.dir}/default.settings.php" overwrite="true" />
            </then>
        </if>
        <if>
            <available file="${build.platform.dir.settings}/settings.php" />
            <then>
                <move file="${build.platform.dir.settings}/settings.php" tofile="${project.tmp.dir}/settings.php" overwrite="true" />
            </then>
        </if>
        <if>
            <available file="${build.platform.dir.settings}/settings.local.php" />
            <then>
                <move file="${build.platform.dir.settings}/settings.local.php" tofile="${project.tmp.dir}/settings.local.php" overwrite="true" />
            </then>
        </if>
        <phingcall target="folder-unprotect">
            <property name="folder.to.unprotect" value="${dir-build}" />
        </phingcall>

        <echo msg="Unprotecting folder." />
        <phingcall target="folder-delete">
            <property name="folder.to.delete" value="${dir-build}" />
        </phingcall>
        <if>
            <available file="${project.tmp.dir}/default.settings.php" />
            <then>
                <mkdir dir="${build.platform.dir.settings}" />
                <move file="${project.tmp.dir}/default.settings.php" tofile="${build.platform.dir.settings}/default.settings.php" />
            </then>
        </if>
        <if>
            <available file="${project.tmp.dir}/settings.php" />
            <then>
                <mkdir dir="${build.platform.dir.settings}" />
                <move file="${project.tmp.dir}/settings.php" tofile="${build.platform.dir.settings}/settings.php" />
            </then>
        </if>
        <if>
            <available file="${project.tmp.dir}/settings.local.php" />
            <then>
                <mkdir dir="${build.platform.dir.settings}" />
                <move file="${project.tmp.dir}/settings.local.php" tofile="${build.platform.dir.settings}/settings.local.php" />
            </then>
        </if>

        <phingcall target="project-subsite-files-setup" />
        <phingcall target="drush-aliases-generate" />
    </target>

    <target name="project-subsite-backup" hidden="true"  description="Backup site defined files from properties.">
        <if>
            <available file="${build.subsite.dir}/settings.php" type="file" />
            <then>
                <property name="site-detected" value="1" />
            </then>
            <else>
                <echo msg="No site installation detected. Skipping backup." />
            </else>
        </if>

        <if>
            <and>
                <equals arg1="${rebuild.auto}" arg2="0" />
                <equals arg1="${site-detected}" arg2="1" />
            </and>
            <then>
                <echo msg="Installed site detected." level="warning" />
                <propertyprompt propertyName="project-subsite-backup-activated" promptText="Do you wish to backup site for this build? (y/n)" />
                <if>
                    <equals arg1="${project-subsite-backup-activated}" arg2="y" />
                    <then>
                        <property name="rebuild.auto" value="1" override="true" />
                    </then>
                </if>
            </then>
        </if>
        <if>
            <and>
                <equals arg1="${rebuild.auto}" arg2="1" />
                <equals arg1="${site-detected}" arg2="1" />
            </and>
            <then>
                <if>
                    <available file="${rebuild.backup.destination}" type="dir" />
                    <then>
                        <delete dir="${rebuild.backup.destination}" includeemptydirs="true" />
                    </then>
                </if>
                <mkdir dir="${rebuild.backup.destination}" />
                <phingcall target="folder-unprotect">
                    <property name="folder.to.unprotect" value="${build.platform.dir.sites}" />
                </phingcall>
                <foreach list="${rebuild.backup.folders}" param="site-item" target="project-subsite-backup-item" delimiter=";">
                    <property name="site-item-type" value="dir" />
                </foreach>
                <foreach list="${rebuild.backup.files}" param="site-item" target="project-subsite-backup-item" delimiter=";">
                    <property name="site-item-type" value="file" />
                </foreach>
            </then>
        </if>
        <if>
            <equals arg1="${project-subsite-backup-activated}" arg2="y" />
            <then>
                <property name="rebuild.auto" value="0" override="true" />
            </then>
        </if>
    </target>

    <target name="project-platform-backup" hidden="true" description="Backup site defined files from properties.">
        <if>
            <available file="${build.subsite.dir}/settings.php" type="file" />
            <then>
                <property name="site-detected" value="1" />
            </then>
            <else>
                <echo msg="No site installation detected. Skipping backup." />
            </else>
        </if>

        <if>
            <and>
                <equals arg1="${rebuild.auto}" arg2="0" />
                <equals arg1="${site-detected}" arg2="1" />
            </and>
            <then>
                <echo msg="Installed site detected." level="warning" />
                <propertyprompt propertyName="project-subsite-backup-activated" promptText="Do you wish to backup site for this build? (y/n)" />
                <if>
                    <equals arg1="${project-subsite-backup-activated}" arg2="y" />
                    <then>
                        <property name="rebuild.auto" value="1" override="true" />
                    </then>
                </if>
            </then>
        </if>
        <if>
            <and>
                <equals arg1="${rebuild.auto}" arg2="1" />
                <equals arg1="${site-detected}" arg2="1" />
            </and>
            <then>
                <if>
                    <available file="${rebuild.backup.destination}" type="dir" />
                    <then>
                        <delete dir="${rebuild.backup.destination}" includeemptydirs="true" />
                    </then>
                </if>
                <mkdir dir="${rebuild.backup.destination}" />
                <phingcall target="folder-unprotect">
                    <property name="folder.to.unprotect" value="${build.platform.dir.sites}" />
                </phingcall>
                <foreach list="${rebuild.backup.site}" param="site-item" target="project-subsite-backup-item" delimiter=";">
                    <property name="site-item-type" value="dir" />
                </foreach>
                <foreach list="${rebuild.backup.files}" param="site-item" target="project-subsite-backup-item" delimiter=";">
                    <property name="site-item-type" value="file" />
                </foreach>
            </then>
        </if>
        <if>
            <equals arg1="${project-subsite-backup-activated}" arg2="y" />
            <then>
                <property name="rebuild.auto" value="0" override="true" />
            </then>
        </if>
    </target>

    <target name="project-subsite-backup-item" description="Backup site item from configuraton list."
       hidden="true">
        <php expression='dirname("${site-item}")' returnProperty="site-item-dir" />
        <property name="site-item-backup-dir" value="${site-item}">
            <filterchain>
                <replaceregexp>
                    <regexp pattern="${build.platform.dir}" replace="${rebuild.backup.destination}" ignoreCase="false" />
                </replaceregexp>
            </filterchain>
        </property>
        <if>
            <available file="${site-item}" type="${site-item-type}" />
            <then>
                <if>
                    <not>
                        <available file="${site-item-backup-dir}" type="dir" />
                    </not>
                    <then>
                        <if>
                            <equals arg1="${site-item-type}" arg2="file" />
                            <then>
                                <php expression='dirname("${site-item-backup-dir}")' returnProperty="site-item-backup-dir-file" />
                                 <mkdir dir="${site-item-backup-dir-file}" />
                            </then>
                        </if>
                    </then>
                </if>
                <if>
                    <equals arg1="${site-item-type}" arg2="dir" />
                    <then>
                        <phingcall target="folder-copy">
                            <property name="copy.destination.path" value="${site-item-backup-dir}" />
                            <property name="copy.source.path" value="${site-item}" />
                        </phingcall>
                    </then>
                    <else>
                        <copy file="${site-item}" tofile="${site-item-backup-dir}" />
                    </else>
                </if>
            </then>
            <else>
                <php expression='ucwords("${site-item-type}")' returnProperty="site-item-type-capitalized" />
                <echo msg="Skipping ${site-item}. ${site-item-type-capitalized} not found." level="warning" />
            </else>
        </if>
    </target>

    <target name="project-subsite-restore" hidden="true" description="Restore site defined files from properties.">
        <if>
            <available file="${rebuild.backup.destination}" type="dir" />
            <then>
                <property name="backup-detected" value="1" />
            </then>
            <else>
                <echo msg="No site backup detected. Skipping restore." />
            </else>
        </if>
        <if>
            <and>
                <equals arg1="${rebuild.auto}" arg2="0" />
                <equals arg1="${backup-detected}" arg2="1" />
            </and>
            <then>
                <echo msg="Site backup detected." level="warning" />
                <propertyprompt propertyName="project-subsite-restore-activated" promptText="Do you wish to restore site for this build? (y/n)" />
                <if>
                    <equals arg1="${project-subsite-restore-activated}" arg2="y" />
                    <then>
                        <property name="rebuild.auto" value="1" override="true" />
                    </then>
                </if>
            </then>
        </if>
        <if>
            <and>
                <equals arg1="${rebuild.auto}" arg2="1" />
                <equals arg1="${backup-detected}" arg2="1" />
            </and>
            <then>
                <echo msg="Restoring site files and folders from ${rebuild.backup.destination}" />
                <foreach list="${rebuild.backup.folders}" param="site-item" target="project-subsite-restore-item" delimiter=";">
                    <property name="site-item-type" value="dir" />
                </foreach>
                <foreach list="${rebuild.backup.files}" param="site-item" target="project-subsite-restore-item" delimiter=";">
                    <property name="site-item-type" value="file" />
                </foreach>
                <delete dir="${rebuild.backup.destination}" includeemptydirs="true" />
            </then>
        </if>
    </target>

    <target name="project-platform-restore" hidden="true" description="Restore site defined files from properties.">
        <if>
            <available file="${rebuild.backup.destination}" type="dir" />
            <then>
                <property name="backup-detected" value="1" />
            </then>
            <else>
                <echo msg="No site backup detected. Skipping restore." />
            </else>
        </if>
        <if>
            <and>
                <equals arg1="${rebuild.auto}" arg2="0" />
                <equals arg1="${backup-detected}" arg2="1" />
            </and>
            <then>
                <echo msg="Site backup detected." level="warning" />
                <propertyprompt propertyName="project-subsite-restore-activated" promptText="Do you wish to restore site for this build? (y/n)" />
                <if>
                    <equals arg1="${project-subsite-restore-activated}" arg2="y" />
                    <then>
                        <property name="rebuild.auto" value="1" override="true" />
                    </then>
                </if>
            </then>
        </if>
        <if>
            <and>
                <equals arg1="${rebuild.auto}" arg2="1" />
                <equals arg1="${backup-detected}" arg2="1" />
            </and>
            <then>
                <echo msg="Restoring site files and folders from ${rebuild.backup.destination}" />
                <foreach list="${rebuild.backup.site}" param="site-item" target="project-subsite-restore-item" delimiter=";">
                    <property name="site-item-type" value="dir" />
                </foreach>
                <foreach list="${rebuild.backup.files}" param="site-item" target="project-subsite-restore-item" delimiter=";">
                    <property name="site-item-type" value="file" />
                </foreach>
                <delete dir="${rebuild.backup.destination}" includeemptydirs="true" />
            </then>
        </if>
    </target>

    <target name="project-subsite-restore-item" description="Restore site item from configuration list."
        hidden="true">
        <property name="site-item-backup" value="${site-item}">
            <filterchain>
                <replaceregexp>
                    <regexp pattern="${build.platform.dir}" replace="${rebuild.backup.destination}" ignoreCase="false" />
                </replaceregexp>
            </filterchain>
        </property>

        <if>
            <available file="${site-item-backup}" type="${site-item-type}" />
            <then>
                <if>
                    <equals arg1="${site-item-type}" arg2="file" />
                    <then>
                        <php expression='dirname("${site-item-backup}")' returnProperty="site-item-backup-file" />
                         <mkdir dir="${site-item-backup-file}" />
                    </then>
                    <else>
                        <mkdir dir="${site-item-backup}" />
                    </else>
                </if>
                <if>
                    <equals arg1="${site-item-type}" arg2="dir"/>
                    <then>
                        <phingcall target="folder-copy">
                            <property name="copy.destination.path" value="${site-item}" />
                            <property name="copy.source.path" value="${site-item-backup}" />
                        </phingcall>
                    </then>
                    <else>
                        <copy file="${site-item-backup}" tofile="${site-item}" overwrite="true"/>
                    </else>
                </if>
            </then>
            <else>
                <php expression='ucwords("${site-item-type}")' returnProperty="site-item-type-capitalized" />
                <echo msg="Skipping ${site-item}. ${site-item-type-capitalized} not found." level="warning" />
            </else>
        </if>
    </target>

    <target name="project-subsite-files-setup" hidden="true" description="Create files directories for subsite.">
        <if>
            <istrue value="${build.subsite.dir.files}" />
            <then>
                <mkdir dir="${build.subsite.dir.files}/private_files" />
                <mkdir dir="${build.subsite.dir.tmp}" />
                <mkdir dir="${build.subsite.dir.files}/css_injector" />
                <mkdir dir="${build.subsite.dir.files}/js_injector" />
            </then>
        </if>
    </target>

    <target name="project-modules-devel-make" hidden="true" description="Makes the development resources with drush.">
        <echo msg="Make the development resources." />
        <phingcall target="drush-make-no-core">
            <property name="make-file" value="${resources.dir.devel.make}" />
            <property name="make-folder" value="${build.platform.dir.sites}" />
            <property name="make-destination" value="${build.site}" />
        </phingcall>
    </target>

    <target name="project-modules-devel-en" hidden="true" description="Enable development modules with drush.">
        <phingcall target="drush-modules-enable">
            <property name="project.drupal.modules" value="${devel.mdls.en}" />
        </phingcall>
    </target>

    <target name="project-modules-devops-dl" hidden="true" description="Download and unpack fpfis resource package.">
        <mkdir dir="${share.path.platform.packages.deploy}" />
        <propertyregex property="drupal-core-version" subject="${profile.core}" pattern="([1-9])\.x" match="$1" casesensitive="false" defaultvalue="7"/>
        <phingcall target="package-download-unpack">
            <property name="package-name" value="MULTISITE-15666.tar.gz" />
            <property name="package-cache-location" value="${share.path.platform.packages.deploy}" />
            <property name="package-download-location" value="https://github.com/ec-europa/platform-deploy/archive/feature" />
            <property name="package-extract-location" value="${build.platform.dir}" />
            <property name="package-extract-options" value="--strip=1" />
        </phingcall>
    </target>

    <target name="project-modules-install-en" hidden="true" description="Install list of modules to enable by default.">
        <phingcall target="drush-modules-enable">
            <property name="project.drupal.modules" value="${project.install.modules}" />
        </phingcall>
    </target>

    <target name="project-platform-composer-dev" hidden="true" description="Run composer install with dev on platform.">
        <echo msg="Run 'composer install' in platform root." />
        <phingcall target="project-composer-install">
            <property name="composer-working-dir" value="${build.platform.dir}" override="true" />
        </phingcall>
    </target>

    <target name="project-platform-composer-no-dev" hidden="true" description="Run composer install without dev on platform.">
        <echo msg="Run 'composer install' in platform root." />
        <phingcall target="project-composer-install">
            <property name="composer-working-dir" value="${build.platform.dir}" override="true" />
            <property name="composer-no-dev" value="true" override="true" />
        </phingcall>
    </target>

    <target name="project-platform-set-docroot" hidden="true" description="Link the platform root to your docroot.">
        <relsym link="${project.docroot}" target="${build.platform.dir}" overwrite="true" />
    </target>

     <target name="project-properties-validate" hidden="true" description="Validate the build properties file." >
        <propval source="build.project.props" required="${toolkit.dir.incl.phing.props}/required.props" haltonerror="${build.haltonerror.props.validate}" logoutput="true" />
    </target >

    <target name="project-rebuild-check" description="Rebuild project if needed. (needs work)"
        hidden="true">
        <if>
            <not>
                <available file="${build.platform.dir.settings}/default.settings.php" type="file" property="build.settings.dir.default.settings" />
            </not>
            <then>
                <echo msg="No default settings detected at ${build.platform.dir.settings}/default.settings.php." level="warning" />
                <propertyprompt propertyName="platform-rebuild" defaultValue="no" promptText="Do you wish to rebuild? (y/n)" />
                <if>
                    <equals arg1="${platform-rebuild}" arg2="y" />
                    <then>
                        <phingcall target="build-dev" />
                    </then>
                    <else>
                        <echo msg="Can not re-generate settings, canceling clone task." level="error" />
                        <fail />
                    </else>
                </if>
            </then>
            <else>
                <echo msg="Default settings found at ${build.platform.dir.settings}/default.settings.php." />
                <echo msg="Proceeding with re-generation of the settings.php." />
            </else>
        </if>
    </target>

    <target name="project-subsite-composer-no-dev" hidden="true" description="Run composer install without dev on subsite.">
        <echo msg="Run 'composer install' in the subsite folder for development purposes." />
        <phingcall target="project-composer-install">
            <property name="composer-working-dir" value="${build.tmp.dir}" override="true" />
            <property name="composer-no-dev" value="true" override="true" />
        </phingcall>
    </target>

    <target name="project-subsite-composer-dev" hidden="true" description="Run composer install with dev on subsite.">
        <echo msg="Run 'composer install' in the subsite folder for development purposes." />
        <phingcall target="project-composer-install">
            <property name="composer-working-dir" value="${build.subsite.dir}" />
        </phingcall>
    </target>

</project>
