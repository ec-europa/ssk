<?xml version="1.0" encoding="UTF-8" ?>

<project name="properties" description="Build properties for configuration and setting of conditional properties." default="">

    <!-- Highest priority to env variables. -->
    <property environment="env" />

    <!-- Load environment build properties. -->
    <if>
        <and>
            <isset property="env.TOOLKIT_ENV_PROPS" />
            <available file="${env.TOOLKIT_ENV_PROPS}" />
        </and>
        <then>
            <property file="${env.TOOLKIT_ENV_PROPS}" logoutput="${logoutput}" />
        </then>
    </if>
    <!-- Load continuous integration properties. Is excluded on .gitignore
         but can be force committed. -->
    <if>
        <and>
            <isset property="env.CI" />
            <available file="${project.basedir}/build.lock.props" />
        </and>
        <then>
            <property file="${project.basedir}/build.lock.props" logoutput="${logoutput}" />
        </then>
    </if>
    <!-- Load developer properties. Also in .gitignore, should never be committed. -->
    <if>
        <available file="${project.basedir}/build.develop.props" type="file" />
        <then>
            <property file="${project.basedir}/build.develop.props" logoutput="${logoutput}" />
        </then>
    </if>
    <!-- Load project properties. Should always be committed. -->
    <if>
        <available file="${project.basedir}/build.project.props" type="file" />
        <then>
            <property file="${project.basedir}/build.project.props" logoutput="${logoutput}" />
        </then>
        <elseif>
            <equals arg1="${project.basedir}" arg2="${toolkit.dir}" />
            <then>
                <fail msg="${project.basedir} ---- ${toolkit.dir} Without a build.project.props" />
            </then>
        </elseif>
    </if>
    <!-- Load Toolkit main properties, default values. -->
    <if>
        <available file="${toolkit.dir.incl.phing.props}/main.props" type="file" />
        <then>
            <property file="${toolkit.dir.incl.phing.props}/main.props" logoutput="false" />
        </then>
    </if>
    <!-- Load version properties if available. -->
    <if>
        <available file="${project.tmp.dir}/build.version.props" />
        <then>
            <property file="${project.tmp.dir}/build.version.props" logoutput="${logoutput}" />
        </then>
        <else>
            <mkdir dir="${project.tmp.dir}" />
        </else>
    </if>

    <!-- Macke sure project id for DB is valid with underscore instead of hyphen. -->
    <php function="str_replace" returnProperty="db-name" level="debug">
        <param value="-" />
        <param value="_" />
        <param value="${db.name}" />
    </php>
    <property name="db.url" value="${db.type}://${db.user}:${db.password}@${db.host}:${db.port}/${db-name}" override="true" />

    <!-- Set compose project name if available. -->
    <if>
        <isset property="env.COMPOSE_PROJECT_NAME" />
        <then>
            <property name="docker.project.id" value="${env.COMPOSE_PROJECT_NAME}" override="true" />
        </then>
    </if>

    <!-- Check if site exists. -->
    <if>
        <available file="${build.settings.dir}/settings.php" type="file" />
        <then>
            <property name="site-detected" value="1" />
        </then>
    </if>

    <!-- Check if backup exists. -->
    <if>
        <available file="${rebuild.backup.destination}" type="dir" />
        <then>
            <property name="backup-detected" value="1" />
        </then>
    </if>

    <!-- And lastly import the project locked properties if we're building on CI -->
    <if>
        <and>
            <isset property="env.CI" />
            <available file="${project.basedir}/build.properties.lock" />
        </and>
        <then>
            <property file="${project.basedir}/build.properties.lock" logoutput="${logoutput}" />
        </then>
    </if>
</project>