<?xml version="1.0" encoding="UTF-8" ?>

<project name="toolkit" default="help">

    <target name="build-toolkit" description="Initializes toolkit and project directories."
        depends="
            toolkit-binary-link,
            toolkit-structure-generate">
        <echo msg="Toolkit successfully initialized." />
    </target>

    <target name="toolkit-binary-link" description="Provide project with toolkit binary at root level.">
        <echo msg="Provide project with starterkit binary at root level." />
        <relsym link="${project.basedir}/toolkit" target="${toolkit.dir.bin}" overwrite="true" />
    </target>

    <target name="toolkit-hooks-composer" description="Echo the composer hook phing targets for use in bash script." hidden="true">
        <echoproperties prefix="composer.hook." />
    </target>

    <target name="toolkit-hooks-git" description="Echo the git hook phing targets for use in bash script." hidden="true">
        <echoproperties prefix="git.hook." />
    </target>

    <target name="toolkit-markdown-generate" description="Generate documentation md files for toolkit.">
        <docgen buildfile="${project.basedir}/build.xml" />
    </target>

    <target name="toolkit-starterkit-upgrade" description="Perform upgrade tasks for upgrading from 2.x to 3.x.">
        <if>
            <available file="${project.basedir}/build.package.xml" type="file" />
            <then>
                <!-- Delete starterkit folders. -->
                <phingcall target="folder-delete">
                    <property name="folder.to.delete" value="${project.basedir}/bin" />
                </phingcall>
                <phingcall target="folder-delete">
                    <property name="folder.to.delete" value="${project.basedir}/docs" />
                </phingcall>
                <phingcall target="folder-delete">
                    <property name="folder.to.delete" value="${project.basedir}/src" />
                </phingcall>
                <phingcall target="folder-delete">
                    <property name="folder.to.delete" value="${resources.dir}/cloudformation" />
                </phingcall>
                <phingcall target="folder-delete">
                    <property name="folder.to.delete" value="${resources.dir}/codedeploy" />
                </phingcall>
                <phingcall target="folder-delete">
                    <property name="folder.to.delete" value="${resources.dir}/composer" />
                </phingcall>
                <!-- Delete starterkit files. -->
                <delete quiet="true">
                    <fileset dir="${project.basedir}">
                        <include name="CHANGELOG.md" />
                        <include name="LICENSE.md" />
                        <include name="README.md" />
                        <include name="appspec.yml" />
                        <include name="build.clone.xml" />
                        <include name="build.package.xml" />
                        <include name="build.project.props.dist" />
                        <include name="build.test.xml" />
                        <include name="composer.lock" />
                        <include name="phpcs-ruleset.xml" />
                    </fileset>
                </delete>

                <!-- Copy the tests over theirs. -->
                <copy todir="${tests.dir}" overwrite="true" haltonerror="false">
                    <fileset dir="${toolkit.dir.incl.templates}/subsite/tests">
                        <include name="composer.json" />
                        <include name="composer.lock" />
                        <include name="behat.yml.dist" />
                    </fileset>
                </copy>

                <exec command="curl -L -o ${project.tmp.dir}/composer.json https://raw.githubusercontent.com/ec-europa/subsite-starterkit/master/resources/composer.json" />
                <trycatch>
                    <try>
                        <exec command="diff ${resources.dir.composer.json} ${project.tmp.dir}/composer.json" passthru="true" checkreturn="true" />
                        <copy file="${toolkit.dir.incl.templates}/subsite/resources/composer.json" tofile="${resources.dir.composer.json}" />
                        <copy file="${toolkit.dir.incl.templates}/subsite/resources/composer.lock" tofile="${resources.dir.composer.lock}" />
                    </try>
                    <catch>
                        <echo msg="Custom ${resources.dir.composer.json} file detected. Not overwriting with toolkit 3.x version." level="warning" />
                    </catch>
                </trycatch>

                <!-- Copy new site.make if it matches starterkit 2.x master. -->
                <exec command="curl -L -o ${project.tmp.dir}/site.make https://raw.githubusercontent.com/ec-europa/subsite-starterkit/master/resources/site.make" />

                <trycatch>
                    <try>
                        <exec command="diff ${resources.dir.site.make} ${project.tmp.dir}/site.make" passthru="true" checkreturn="true" />
                        <copy file="${toolkit.dir.incl.templates}/subsite/resources/site.make" tofile="${resources.dir.site.make}" />
                    </try>
                    <catch>
                        <echo msg="Custom ${resources.dir.site.make} file detected. Not overwriting with toolkit 3.x version." level="warning" />
                    </catch>
                </trycatch>

                <!-- Copy new .gitignore if it matches starterkit 2.x master. -->
                <exec command="curl -L -o ${project.tmp.dir}/.gitignore https://raw.githubusercontent.com/ec-europa/subsite-starterkit/master/.gitignore" />

                <trycatch>
                    <try>
                        <exec command="diff ${project.basedir}/.gitignore ${project.tmp.dir}/.gitignore" passthru="true" checkreturn="true" />
                        <copy file="${toolkit.dir.incl.templates}/subsite/resources/.gitignore" tofile="${project.basedir}/.gitignore" />
                    </try>
                    <catch>
                        <echo msg="Custom .gitignore file detected. Not overwriting with toolkit 3.x version." level="warning" />
                    </catch>
                </trycatch>

                <!-- Move subsite resources to new location. -->
                <move file="build.properties" tofile="build.project.props" overwrite="true" haltonerror="false" />
                <move file="${resources.dir}/phpcs-custom.xml" tofile="phpcs-ruleset.xml" overwrite="true" haltonerror="false" />
                <move file="${resources.dir}/build.custom.xml" tofile="build.project.xml" overwrite="true" haltonerror="false" />
                <copy file="${toolkit.dir.incl.templates}/subsite/resources/devel.make" tofile="${resources.dir.devel.make}" />

                <!-- Copy cause move can not handle symlinks -->
                <mkdir dir="lib-backup" />
                <copy todir="lib-backup" haltonerror="true">
                    <fileset dir="${lib.dir}">
                        <include name="**" />
                    </fileset>
                </copy>
                <delete dir="${lib.dir}" />

                <mkdir dir="${lib.dir.libraries}" />
                <mkdir dir="${lib.dir.modules.custom}" />
                <mkdir dir="${lib.dir.modules.features}" />
                <mkdir dir="${lib.dir.themes}" />
                <mkdir dir="${lib.dir.source}" />
                <if>
                    <available file="lib-backup/modules/custom" type="dir" />
                    <then>
                        <copy todir="${lib.dir.modules.custom}" haltonerror="false">
                            <fileset dir="lib-backup/modules/custom">
                                <include name="**" />
                            </fileset>
                        </copy>
                        <delete dir="lib-backup/modules/custom" quiet="true" />
                    </then>
                </if>
                <if>
                    <available file="lib-backup/modules" type="dir" />
                    <then>
                        <copy todir="${lib.dir.modules.custom}" haltonerror="false">
                            <fileset dir="lib-backup/modules">
                                <include name="**" />
                            </fileset>
                        </copy>
                        <delete dir="lib-backup/modules" quiet="true" />
                    </then>
                </if>
                <if>
                    <available file="lib-backup/features/custom" type="dir" />
                    <then>
                        <copy todir="${lib.dir.modules.features}" haltonerror="false">
                            <fileset dir="lib-backup/features/custom">
                                <include name="**" />
                            </fileset>
                        </copy>
                        <delete dir="lib-backup/features/custom" quiet="true" />
                    </then>
                </if>
                <if>
                    <available file="lib-backup/features" type="dir" />
                    <then>
                        <copy todir="${lib.dir.modules.features}" haltonerror="false">
                            <fileset dir="lib-backup/features">
                                <include name="**" />
                            </fileset>
                        </copy>
                        <delete dir="lib-backup/features" quiet="true" />
                    </then>
                </if>
                <if>
                    <available file="lib-backup/themes" type="dir" />
                    <then>
                        <copy todir="${lib.dir.themes}" haltonerror="false">
                            <fileset dir="lib-backup/themes">
                                <include name="**" />
                            </fileset>
                        </copy>
                        <delete dir="lib-backup/themes" quiet="true" />
                    </then>
                </if>
                <if>
                    <available file="lib-backup/libraries" type="dir" />
                    <then>
                        <copy todir="${lib.dir.libraries}" haltonerror="false">
                            <fileset dir="lib-backup/libraries">
                                <include name="**" />
                            </fileset>
                        </copy>
                        <delete dir="lib-backup/libraries" quiet="true" />
                    </then>
                </if>
                <if>
                    <available file="lib-backup/src" type="dir" />
                    <then>
                        <copy todir="${lib.dir.source}" haltonerror="false">
                            <fileset dir="lib-backup/src">
                                <include name="**" />
                            </fileset>
                        </copy>
                        <delete dir="lib-backup/src" quiet="true" />
                    </then>
                </if>
            </then>
        </if>
        <delete dir="lib-backup" />
    </target>

    <target name="toolkit-structure-generate" description="Create the lib directory structure.">
        <if>
            <and>
                <not>
                    <available file="${lib.dir}" type="dir" />
                </not>
                <!-- <equals arg1="${project.basedir}" arg2="${toolkit.dir}" /> -->
            </and>
            <then>
                <phingcall target="toolkit-templates-copy">
                    <property name="project-type" value="${project.type}" override="true" />
                </phingcall>
            </then>
            <elseif>
                <available file="${lib.dir}" type="dir" />
                <then>
                    <echo msg="Project structure exists already." />
                </then>
            </elseif>
            <else>
                <input propertyName="project-type" message="What type of project do you want to create?" validargs="profile,subsite" />
                <phingcall target="toolkit-templates-copy">
                    <property name="project-type" value="${project-type}" override="true" />
                </phingcall>
            </else>
        </if>
    </target>

    <target name="toolkit-templates-copy" description="Copies template files to your project for toolkit integration.">
        <echo msg="Ensuring the presence of build.xml and Jenkinsfile." />
        <copy file="${toolkit.dir.incl.phing.props}/main.props" tofile="${project.basedir}/build.default.props" overwrite="true" />
        <copy todir="${project.basedir}">
            <fileset dir="${toolkit.dir.incl.templates}/${project-type}" />
        </copy>
        <echo msg="Project structure for ${project-type} created." />
    </target>

</project>
